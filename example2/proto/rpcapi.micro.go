// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rpcapi.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Say service

type SayService interface {
	Hello(ctx context.Context, in *SayParam, opts ...client.CallOption) (*SayResponse, error)
	MyName(ctx context.Context, in *SayParam, opts ...client.CallOption) (*SayParam, error)
	Stream(ctx context.Context, in *SRequest, opts ...client.CallOption) (Say_StreamService, error)
	BidirectionalStream(ctx context.Context, opts ...client.CallOption) (Say_BidirectionalStreamService, error)
}

type sayService struct {
	c    client.Client
	name string
}

func NewSayService(name string, c client.Client) SayService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &sayService{
		c:    c,
		name: name,
	}
}

func (c *sayService) Hello(ctx context.Context, in *SayParam, opts ...client.CallOption) (*SayResponse, error) {
	req := c.c.NewRequest(c.name, "Say.Hello", in)
	out := new(SayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayService) MyName(ctx context.Context, in *SayParam, opts ...client.CallOption) (*SayParam, error) {
	req := c.c.NewRequest(c.name, "Say.MyName", in)
	out := new(SayParam)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayService) Stream(ctx context.Context, in *SRequest, opts ...client.CallOption) (Say_StreamService, error) {
	req := c.c.NewRequest(c.name, "Say.Stream", &SRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &sayServiceStream{stream}, nil
}

type Say_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SResponse, error)
}

type sayServiceStream struct {
	stream client.Stream
}

func (x *sayServiceStream) Close() error {
	return x.stream.Close()
}

func (x *sayServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *sayServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *sayServiceStream) Recv() (*SResponse, error) {
	m := new(SResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sayService) BidirectionalStream(ctx context.Context, opts ...client.CallOption) (Say_BidirectionalStreamService, error) {
	req := c.c.NewRequest(c.name, "Say.BidirectionalStream", &SRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &sayServiceBidirectionalStream{stream}, nil
}

type Say_BidirectionalStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SRequest) error
	Recv() (*SResponse, error)
}

type sayServiceBidirectionalStream struct {
	stream client.Stream
}

func (x *sayServiceBidirectionalStream) Close() error {
	return x.stream.Close()
}

func (x *sayServiceBidirectionalStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *sayServiceBidirectionalStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *sayServiceBidirectionalStream) Send(m *SRequest) error {
	return x.stream.Send(m)
}

func (x *sayServiceBidirectionalStream) Recv() (*SResponse, error) {
	m := new(SResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Say service

type SayHandler interface {
	Hello(context.Context, *SayParam, *SayResponse) error
	MyName(context.Context, *SayParam, *SayParam) error
	Stream(context.Context, *SRequest, Say_StreamStream) error
	BidirectionalStream(context.Context, Say_BidirectionalStreamStream) error
}

func RegisterSayHandler(s server.Server, hdlr SayHandler, opts ...server.HandlerOption) error {
	type say interface {
		Hello(ctx context.Context, in *SayParam, out *SayResponse) error
		MyName(ctx context.Context, in *SayParam, out *SayParam) error
		Stream(ctx context.Context, stream server.Stream) error
		BidirectionalStream(ctx context.Context, stream server.Stream) error
	}
	type Say struct {
		say
	}
	h := &sayHandler{hdlr}
	return s.Handle(s.NewHandler(&Say{h}, opts...))
}

type sayHandler struct {
	SayHandler
}

func (h *sayHandler) Hello(ctx context.Context, in *SayParam, out *SayResponse) error {
	return h.SayHandler.Hello(ctx, in, out)
}

func (h *sayHandler) MyName(ctx context.Context, in *SayParam, out *SayParam) error {
	return h.SayHandler.MyName(ctx, in, out)
}

func (h *sayHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(SRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SayHandler.Stream(ctx, m, &sayStreamStream{stream})
}

type Say_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SResponse) error
}

type sayStreamStream struct {
	stream server.Stream
}

func (x *sayStreamStream) Close() error {
	return x.stream.Close()
}

func (x *sayStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *sayStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *sayStreamStream) Send(m *SResponse) error {
	return x.stream.Send(m)
}

func (h *sayHandler) BidirectionalStream(ctx context.Context, stream server.Stream) error {
	return h.SayHandler.BidirectionalStream(ctx, &sayBidirectionalStreamStream{stream})
}

type Say_BidirectionalStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SResponse) error
	Recv() (*SRequest, error)
}

type sayBidirectionalStreamStream struct {
	stream server.Stream
}

func (x *sayBidirectionalStreamStream) Close() error {
	return x.stream.Close()
}

func (x *sayBidirectionalStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *sayBidirectionalStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *sayBidirectionalStreamStream) Send(m *SResponse) error {
	return x.stream.Send(m)
}

func (x *sayBidirectionalStreamStream) Recv() (*SRequest, error) {
	m := new(SRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
